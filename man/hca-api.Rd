% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hca-api.R
\name{HCA-API}
\alias{HCA-API}
\alias{checkoutBundle}
\alias{getBundleCheckout}
\alias{getFile}
\alias{headFile}
\title{HCA API methods}
\usage{
checkoutBundle(x, uuid, version = NULL, replica = "aws")

getBundleCheckout(x, checkout_job_id, replica = "aws")

getFile(x, uuid, version = NULL, replica = "aws", destination = tempfile())

headFile(x, uuid, version = NULL, replica = "aws")
}
\arguments{
\item{x}{An HCABrowser object that is the subject of the request.}

\item{uuid}{character(1). A RFC4122-compliant ID for the bundle.}

\item{version}{character(1). Timestamp of bundle creation in RFC3339.}

\item{replica}{character(1). A replica to fetch form. Can be one of
"aws", "gcp", or "azure".  Default is "aws".}

\item{checkout_job_id}{character(1). A RFC4122-complliant ID for
the checkout job request.}

\item{destination}{character(1) path to downloaded file. The path
cannot exist.}
}
\value{
\code{checkoutBundle()} returns a character(1) identifier to be
used as the \verb{checkout_job_id=} to determine status of the
checkout using \code{getBundleCheckout()}.

\code{getBundleCheckout()} returns a list. One component of the
list is \verb{status=}. If the value is \code{SUCCEEDED}, then the list
contains a second element \verb{location=} containing a URL to the
location of the checkout, e.g., an s3 bucket.

\code{getFile()} returns the path to the downloaded file.

`headFile()` returns a tibble of technical metadata,
    including file size and content type (e.g.,
    `application/gzip`), about a file.
}
\description{
Methods to access the Human Cell Atlas's Data
Coordination Platform (HCA DCP) using the platform's REST API.

\code{checkoutBundle()} initiates the 'checkout' process
from the HCA DCP DSS.

\code{getBundleCheckout()} queries the status of a bundle
checkout request

\code{getFile()} retrieves a file from its UUID.

`headFile()` retrieves metadata about a file from its
    UUID.
}
\examples{

hca <-
    HCABrowser() \%>\%
    filter('files.specimen_from_organism_json.organ.text' == "brain")
hca

result <-
    hca \%>\%
    searchBundles(per_page = 10L, output_format = "raw")
result

tbl <-
   results(result)[[1]]$metadata$manifest$files \%>\%
   bind_rows() \%>\%
   mutate(`content-type` = noquote(`content-type`))
tbl


re <- "^([^\\\\.]+)\\\\.(.*)$" # uuid / version as before / after the first '.'

uuid <-
    hca \%>\%
    searchBundles(per_page = 10L, output_format = "summary") \%>\%
    as_tibble() \%>\%
    mutate(
       uuid = sub(re, "\\\\1", bundle_fqid),
       version = sub(re, "\\\\2", bundle_fqid)
   ) \%>\%
   pull(uuid)
uuid

checkout_job_id <- checkoutBundle(hca, uuid[1])
checkout_job_id


getBundleCheckout(hca, checkout_job_id)


fastq <-
   tbl \%>\%
   filter(endsWith(name, "fastq.gz")) \%>\%
   select(name, uuid)
fastq

uuid <- pull(fastq) \%>\% tail(1)
uuid

\dontrun{
destination <- getFile(hca, uuid)
readLines(destination, 4L)
}


headFile(hca, uuid)

}
\author{
Daniel Van Twisk
}
